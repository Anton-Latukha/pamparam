* Tasks
* Clojure functions                                                                      :cards:
https://clojuredocs.org/clojure.core/
** Number of items in the collection
#+begin_src clojure
(count nil)
;; => 0

(count [])
;; => 0

(count [1 2 3])
;; => 3

(count {:one 1 :two 2})
;; => 2

(count [1 \a "string" [1 2] {:foo :bar}])
;; => 5

(count "string")
;; => 6
#+end_src
*** a
count
** Create a new vector from collection
#+begin_src clojure
(vec '(1 2 3))
;; => [1 2 3]

(vec [1 2 3])
;; => [1 2 3]

(vec #{1 2 3})
;; => [1 3 2]

(vec {:a 1 :b 2 :c 3})
;; => [[:a 1] [:b 2] [:c 3]]

(vec '())
;; => []
#+end_src
*** a
vec
** Repeat an object several times
#+begin_src clojure
(repeat 5 \A)
;; => (\A \A \A \A \A)
#+end_src
*** a
repeat
** Return a new set of the same type without keys
#+begin_src clojure
(disj #{1 2 3} 2)
;; => #{1 3}

(disj #{1 2 3} 1 3)
;; => #{2}
#+end_src
*** a
disj
** Return the value in a nested map, using a sequence of keys
#+begin_src clojure
;;* Reach into nested maps
(def m {:username "sally"
        :profile {:name "Sally Clojurian"
                  :address {:city "Austin" :state "TX"}}})

;;** :
(get-in m [:profile :name])
;; => "Sally Clojurian"

;;** :
(get-in m [:profile :address :city])
;; => "Austin"

;;** :
(get-in m [:profile :address :zip-code])
;; => nil

;;** :
(get-in m [:profile :address :zip-code] "no zip code!")
;; => "no zip code!"

;;* Vectors are also associative
(def v [[1 2 3]
        [4 5 6]
        [7 8 9]])

;;** :
(get-in v [0 2])
;; => 3

;;** :
(get-in v [2 1])
;; => 8

;;* Mix associative types:
(def mv {:username "jimmy"
         :pets [{:name "Rex"
                 :type :dog}
                {:name "Sniffles"
                 :type :hamster}]})
(get-in mv [:pets 1 :type])
;; => :hamster
#+end_src
*** a
get-in
** String to symbol
#+begin_src clojure
(eval (list (symbol "+") 1 2))
;; => 3
#+end_src
*** a
symbol
** Apply map then concat
#+begin_src clojure
;;* :
(defn f1 [n]
  [(- n 1) n (+ n 1)])
(f1 1)
;; =>
;; [0 1 2]

;;* :
(apply concat (map f1 [1 4 8]))
;; =>
;; (0 1 2 3 4 5 7 8 9)

;;* :
(mapcat f1 [1 4 8])
;; =>
;; (0 1 2 3 4 5 7 8 9)
#+end_src
*** a
mapcat
** cddr
#+begin_src clojure
(nnext '(1 2 3))
;; => (3)
#+end_src
*** a
nnext
** make a forward declaration
*** a
declare
** avoid symbol resolution in a macro
#+begin_src clojure
;;* :
(defmacro awhen1 [expr & body]
  `(let [~'it ~expr]
     (if ~'it
       (do ~@body))))

(macroexpand-1 '(awhen1 [1 2 3] (it 2)))
;; => (clojure.core/let [it [1 2 3]] (if it (do (it 2))))

;;* :
(defmacro awhen2 [expr & body]
  `(let [it ~expr]
     (if it
       (do ~@body))))

(macroexpand-1 '(awhen2 [1 2 3] (it 2)))
;; => (clojure.core/let [user/it [1 2 3]] (if user/it (do (it 2))))
#+end_src
*** a
~'
** Take fn1,...,fnN => #(vector (apply fn1 %&) ... (apply fnN %&))
#+begin_src clojure
;;* :
(let [coll {:a 1 :b 2 :c 3}]
  (= [(:a coll) (:b coll)]
     ((juxt :a :b) coll)
     (#(vector (apply :a %&) (apply :b %&)) coll)
     [1 2]))
;; => true

;;* :
(= ((juxt take drop) 3 (range 9))
   (->> [take drop]
        (map #(% 3 (range 9)))))
;; => true
#+end_src

*** a
juxt
** Return a lazy sequence of initial items matching a predicate in a collection
#+begin_src clojure
;;* :
(take-while neg? [-1 -2 -3 4 5 6 -7 -8 9])
;; => (-1 -2 -3)

;;* :
(filter neg? [-1 -2 -3 4 5 6 -7 -8 9])
;; => (-1 -2 -3 -7 -8)
#+end_src
*** a
take-while
** Return a lazy sequence of the first =N= items in coll
#+begin_src clojure
;;* Example

;;** :
(take 3 '(1 2 3 4 5 6))
;; => (1 2 3)

;;** :
(take 3 [1 2])
;; => (1 2)

;;** :
(take 0 [1])
;; => ()
#+end_src
*** a
take
** Return a lazy sequence removing all initial items that don't match a predicate
#+begin_src clojure
;;* :
(drop-while neg? [-1 -2 -3 4 5 6 -7 -8 9])
;; => (4 5 6 -7 -8 9)

;;* :
(filter (comp not neg?)  [-1 -2 -3 4 5 6 -7 -8 9])
;; => (4 5 6 9)
#+end_src
*** a
drop-while
** Set =*ns*= to the namespace named by the symbol, creating it if needed
#+begin_src clojure
;;* Examples
;;** create and switch to a namespace:
(in-ns 'first-namespace)
;; => first-namespace

;;** create a var in the current namespace:
(def my-var "value")
;; => #'first-namespace/my-var

;;** :
(in-ns 'second-namespace)
;; => second-namespace

;;** refer to a symbol in another namespace:
first-namespace/my-var
;; => "value"

;;** clojure.core is not imported:
(lispy-clojure/ok
 (list))
;; => "java.lang.RuntimeException: Unable to resolve symbol: list in this context, compiling:(/tmp/form-init3619942662088095204.clj:2:2)"

;;** back to default ns:
(in-ns 'user)
;; => user
#+end_src
*** a
in-ns
** Import all public vars from a namespace into the current namespace, subject to filters
#+begin_src clojure
;;* Example 1: import everything (lame)
;;** :
(ns one)
;; => one

;;** :
(def t1 "t1")
;; => #'one/t1

;;** :
(ns two (:refer one))
;; => two

;;** :
t1
;; => "t1"

;;* Example 2: import specific functions
;;** :
(in-ns 'temp)
;; => temp

;;** :
(clojure.core/refer 'clojure.string :only '[capitalize trim])
;; => nil

;;** :
(capitalize (trim " hOnduRAS "))
;; => "Honduras"

;;* Example 3: import specific functions via aliases

;;** :
(clojure.core/refer 'clojure.string :rename '{capitalize cap, trim trm})
;; => nil

;;** :
(cap (trm " hOnduRAS "))
;; => "Honduras"

;;** :
(ns user)
;; => user
#+end_src
*** a
refer
** Same as (refer 'clojure.core <filters>)
=clojure.core= is included in full by =ns=, i.e.:
#+begin_src python
from clojure.core import *
#+end_src

Exclude =defstruct= from being imported:
#+begin_src clojure
(ns joy.ns-ex
  (:refer-clojure :exclude [defstruct]))
;; Equivalent
(ns joy.ns-ex
  (:refer clojure.core :exclude [defstruct]))
#+end_src

Python:
#+begin_src python
from clojure.core import *
del defstruct
#+end_src
*** a
refer-clojure
** Load libs, skipping any that are already loaded
Load =clojure.zip= and alias it to =z=:
#+begin_src clojure
(require '(clojure zip [set :as s]))
#+end_src
Python:
#+begin_src python
from sys import path as p
#+end_src

Prefix Lists:
It's common for Clojure code to depend on several libs whose names
have the same prefix. When specifying libs, prefix lists can be used
to reduce repetition. A prefix list contains the shared prefix
followed by libspecs with the shared prefix removed from the lib
names. After removing the prefix, the names that remain must not
contain any periods.

Recognized options:
- =:as= takes a symbol as its argument and makes that symbol an alias to
  the lib's namespace in the current namespace.
- =:refer= takes a list of symbols to refer from the namespace or the
  =:all= keyword to bring in all public vars.

Flags:
- =:reload= forces loading of all the identified libs even if they are
  already loaded
- =:reload-all= implies =:reload= and also forces loading of all libs that
  the identified libs directly or indirectly load via require or use
- =:verbose= triggers printing information about each load, alias, and
  refer

*** a
require
** Like =require=, but also refer to each lib's namespace using =clojure.core/refer=
Use everyting in =clojure.set= and =clojure.xml= without namespace
qualification. This is never good style to do.
#+begin_src clojure
(ns joy.ns-ex
  (:use [clojure set xml]))
#+end_src

Python:
#+begin_src python
from clojure.set import *
from clojure.xml import *
#+end_src

Using =:only=:
Use =clojure.test.are= and =clojure.test.is= without ns qualifier:
#+begin_src clojure
(ns joy.ns-ex
  (:use [clojure.test :only (are is)]))
#+end_src
Python:
#+begin_src python
from clojure.test import are, is
#+end_src
*** a
use
** Import a Java class
Import =java.util.Date= and =java.io.File=:
#+begin_src clojure
;;* Example
;;** :
(import java.util.Date)
;; => java.util.Date

;;** :
(str (Date.))
;; => "Thu Dec 21 14:21:42 CET 2017"
#+end_src

Jython:
#+begin_src python
from java.util import Date
from java.io import File
#+end_src
*** a
import
** Load Clojure code from resources in classpath
*** a
load
** When compiling, generate compiled bytecode for a class
*** a
genclass
** Return a random permutation of a collection
*** a
shuffle
** Return the first logical true value of (pred x) in coll
#+begin_src clojure
;;* Example

;;** :
(some even? '(1 2 3 4))
;; => true

;;** :
(some even? '(1 3 5 7))
;; => nil
#+end_src
*** a
some
** Take a function with no args and return an infinite lazy sequence of calls to it
#+begin_src clojure
;;* Example

;;** :
(take 5 (repeatedly #(rand-int 11)))
;; => (10 3 6 5 7)

;;** :
(repeatedly 5 #(rand-int 11))
;; => (4 0 10 3 5)
#+end_src
*** a
repeatedly
** Set in-transaction value of a ref
#+begin_src clojure
;;* Example

;;** :
(ns user)

;;** :
(def names (ref []))

(defn add-name [name]
  (dosync
   (alter names conj name)))

(add-name "zack")
;; => ["zack"]

;;** :
(add-name "shelley")
;; => ["zack" "shelley"]

;;** :
names
;; => #ref[{:status :ready, :val ["zack" "shelley"]} 0x133dc556]

;;** :
@names
;; => ["zack" "shelley"]

;;** :
(deref names)
;; => ["zack" "shelley"]
#+end_src
*** a
alter
** Run expressions in a transaction
Starts a transaction if none is already running on this thread.

Any uncaught exception will abort the transaction.

The exprs may be run more than once, but any effects on refs will be
atomic.

#+begin_src clojure
;;* Example

;;** create two bank accounts:
(def acc1 (ref 100))
(def acc2 (ref 200))
[@acc1 @acc2]
;; => [100 200]

;;** either both accounts will be changed or none:
(defn transfer-money [a1 a2 amount]
  (dosync
   (alter a1 - amount)
   (alter a2 + amount)
   amount))
(transfer-money acc1 acc2 20)
;; => 20

;;** :
[@acc1 @acc2]
;; => [80 220]
#+end_src

*** a
dosync
** Set in-transaction-value of ref to (apply fun in-transaction-value-of-ref args). Commutative
#+begin_src clojure
;;* Example 1
;; `commute' will ALWAYS run the update function TWICE

;;** :
(ns user)
;; => user

;;** :
(defn sleep-print-update [sleep-time thread-name update-fn]
  (fn [state]
    (Thread/sleep sleep-time)
    (println (str thread-name ": " state))
    (update-fn state)))
(def counter (ref 0))

;;** :
(dosync (ref-set counter 0))
(dosync (commute counter (sleep-print-update 100 "Commute Thread A" inc)))
(dosync (commute counter (sleep-print-update 150 "Commute Thread B" inc)))
;; => Commute Thread A: 0
;;    Commute Thread A: 0
;;    Commute Thread B: 1
;;    Commute Thread B: 1
;;
;;    2

;;* Example 2

;;** :
(def counter (ref 0))

(defn commute-inc! [counter]
  (dosync
   (Thread/sleep 100)
   (commute counter inc)))

(defn alter-inc! [counter]
  (dosync
   (Thread/sleep 100)
   (alter counter inc)))

(defn bombard-counter! [n f counter]
  (apply pcalls (repeat n #(f counter))))

(dosync (ref-set counter 0))
;; => 0

;;** :
(time
 (doall (bombard-counter! 20 alter-inc! counter)))
;; =>
;; "Elapsed time: 2009.621166 msecs"
;;
;; (1 2 3 11 7 6 4 8 10 9 13 15 14 5 19 17 12 20 18 16)

;;** :
@counter
;; => 20

;;** :
(dosync (ref-set counter 0))
(time
 (doall (bombard-counter! 20 commute-inc! counter)))
;; =>
;; "Elapsed time: 202.306055 msecs"
;;
;; (1 1 8 1 1 1 1 10 9 1 1 12 12 12 12 12 12 12 19 19)

;;** :
@counter
;; => 20
#+end_src
*** a
commute
