* Clojure functions                                                                      :cards:
https://clojuredocs.org/clojure.core/
** Number of items in the collection
#+begin_src clojure
(count nil)
;; => 0

(count [])
;; => 0

(count [1 2 3])
;; => 3

(count {:one 1 :two 2})
;; => 2

(count [1 \a "string" [1 2] {:foo :bar}])
;; => 5

(count "string")
;; => 6
#+end_src
*** a
count
** Create a new vector from collection
#+begin_src clojure
(vec '(1 2 3))
;; => [1 2 3]

(vec [1 2 3])
;; => [1 2 3]

(vec #{1 2 3})
;; => [1 3 2]

(vec {:a 1 :b 2 :c 3})
;; => [[:a 1] [:b 2] [:c 3]]

(vec '())
;; => []
#+end_src
*** a
vec
** Repeat an object several times
#+begin_src clojure
(repeat 5 \A)
;; => (\A \A \A \A \A)
#+end_src
*** a
repeat
** Return a new set of the same type without keys
#+begin_src clojure
(disj #{1 2 3} 2)
;; => #{1 3}

(disj #{1 2 3} 1 3)
;; => #{2}
#+end_src
*** a
disj
** Return the value in a nested map, using a sequence of keys
#+begin_src clojure
;;* Reach into nested maps
(def m {:username "sally"
        :profile {:name "Sally Clojurian"
                  :address {:city "Austin" :state "TX"}}})

;;** :
(get-in m [:profile :name])
;; => "Sally Clojurian"

;;** :
(get-in m [:profile :address :city])
;; => "Austin"

;;** :
(get-in m [:profile :address :zip-code])
;; => nil

;;** :
(get-in m [:profile :address :zip-code] "no zip code!")
;; => "no zip code!"

;;* Vectors are also associative
(def v [[1 2 3]
        [4 5 6]
        [7 8 9]])

;;** :
(get-in v [0 2])
;; => 3

;;** :
(get-in v [2 1])
;; => 8

;;* Mix associative types:
(def mv {:username "jimmy"
         :pets [{:name "Rex"
                 :type :dog}
                {:name "Sniffles"
                 :type :hamster}]})
(get-in mv [:pets 1 :type])
;; => :hamster
#+end_src
*** a
get-in
** String to symbol
#+begin_src clojure
(eval (list (symbol "+") 1 2))
;; => 3
#+end_src
*** a
symbol
** Apply map then concat
#+begin_src clojure
;;* :
(defn f1 [n]
  [(- n 1) n (+ n 1)])
(f1 1)
;; =>
;; [0 1 2]

;;* :
(apply concat (map f1 [1 4 8]))
;; =>
;; (0 1 2 3 4 5 7 8 9)

;;* :
(mapcat f1 [1 4 8])
;; =>
;; (0 1 2 3 4 5 7 8 9)
#+end_src
*** a
mapcat
** cddr
#+begin_src clojure
(nnext '(1 2 3))
;; => (3)
#+end_src
*** a
nnext
** make a forward declaration
*** a
declare
** avoid symbol resolution in a macro
#+begin_src clojure
;;* :
(defmacro awhen1 [expr & body]
  `(let [~'it ~expr]
     (if ~'it
       (do ~@body))))

(macroexpand-1 '(awhen1 [1 2 3] (it 2)))
;; => (clojure.core/let [it [1 2 3]] (if it (do (it 2))))

;;* :
(defmacro awhen2 [expr & body]
  `(let [it ~expr]
     (if it
       (do ~@body))))

(macroexpand-1 '(awhen2 [1 2 3] (it 2)))
;; => (clojure.core/let [user/it [1 2 3]] (if user/it (do (it 2))))
#+end_src
*** a
~'
** Take fn1,...,fnN => #(vector (apply fn1 %&) ... (apply fnN %&))
#+begin_src clojure
;;* :
(let [coll {:a 1 :b 2 :c 3}]
  (= [(:a coll) (:b coll)]
     ((juxt :a :b) coll)
     (#(vector (apply :a %&) (apply :b %&)) coll)
     [1 2]))
;; => true
#+end_src

*** a
juxt
